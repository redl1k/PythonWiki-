# Часто одно и то же действие надо выполнить для набора однотипных данных.

# Например, преобразовать все строки в списке в верхний регистр.
# Для выполнения таких действий в Python используется цикл for.

# Цикл for перебирает по одному элементы указанной последовательности и выполняет действия,
# которые указаны в блоке for, для каждого элемента.

# Примеры последовательностей элементов, по которым может проходиться цикл for:
# строка; список; словарь; ф-ия range; любой итерируемый объект

#######################################################################################################################
# Работа цикла for со списками (list)

# Пример преобразования строк в списке в верхний регистр без цикла for:
lower_words = ['я', 'учу', 'Python']
upper_words = []
upper_words.append(lower_words[0].upper())
upper_words.append(lower_words[1].upper())
upper_words.append(lower_words[2].upper())
print(upper_words)
# Минусы:
# - одно и то же действие надо повторять несколько раз
# - код привязан к определенному количеству элементов в списке

# Пример с использованием цикла for:
lower_words = ['я', 'учу', 'Python']
upper_words = []
for word in lower_words:                # имя переменной word может быть любым
    upper_words.append(word.upper())    # тут метод .upper применяется к переменной word
print(upper_words)
# Выражение for word in words: upper_words.append(word.upper()) означает:
# «для каждого слова в списке lower_words выполнить действия в блоке for».
# При этом word это имя переменной, которое каждую итерацию цикла ссылается на разные значения.

# Для лучшего понимания циклов поможет сайт визуализирующий выполняемый код pythontutor.com
# Ссылка на пример выше: https://goo.su/9zoB


# Аналогичным образом for работает с кортежами (tuple)
vlan = (10, 20, 30, 40, 100)
for vlan_id in vlan:
    print(f'vlan {vlan_id}')
    print(f' name VLAN_{vlan_id}')
    print(' exit')

########################################################################################################################
# Работа цикла for со словарями dict

# Применив for к словарю, он пройдёт только по ключам:
router = {
    'hostname': 'R1',
    'network': '10.0.1.0 /24',
    'ip': '10.0.1.1'
}
for key in router:
    print(key)  # обращаемся к словарю и получаем ключи


# Если требуется вывести только значения:
for key in router:
    print(router[key])  # обращаемся к словарю по ключам, чтобы получить значения


# Соотвествунно, если нужны пары ключ-значение:

# Вариан 1.
for key in router:
    print(key + ':\t' + router[key])

# Вариан 2.
for key, value in router.items():   # метод items возвращает объект view: dict_items([('key', 'value'), ...])
    print(key + ':\t' + value)      # выводит ключ и значение


########################################################################################################################
# Работа цикла for со строками (str)

# При работе со строками, цикл for перебирает символы строки.
for letter in 'Test string':
    print(letter)   # По итогу мы получим каждый символ строки выведенный по отдельности

########################################################################################################################
# Работа цикла for с числами, ф-ия range

# Ф-ия range генерирует серию целых чисел, от значения start до stop: range(start, stop[, step])
# Её можно использовать в цикле for и обходить весь диапазон как список.

for i in range(1, 4):
    print(f'interface GigabitEthernet0/{i}')
    print(' no shutdown')


########################################################################################################################
# Вложенные for

cmd = ['no shutdown', 'exit']   # команды которые нужно применить к интерфейсам
intf = [0, 1, 2, 3]             # номера интерфейсов

for i in intf:          # проходит по всем интерфейсам из списка intf
    print(f'interface GigabitEthernet0/{i}')
    for on in cmd:      # проходит по всем командам из списка cmd
        print(f' {on}')


########################################################################################################################
# Совмещение for и if

access_template = ['switchport mode access', 'switchport access vlan']  # команды для настройки VLAN
access = {'0/1': 10, '0/2': 20, '0/3': 100, '0/4': 150}  # итерфейсы и соотвествующие им VLAN ID

# В первом цикле for перебираются ключи и значения во вложенном словаре access
# Текущий ключ, на данный момент цикла, хранится в переменной intf
# Текущее значение, на данный момент цикла, хранится в переменной vlan
for intf, vlan in access.items():
    # Выводится строка interface FastEthernet с добавлением к ней номера интерфейса
    print('interface FastEthernet' + intf)
# Во втором цикле for перебираются команды из списка access_template
    for command in access_template:
        # Так как к команде switchport access vlan _ надо добавить номер VLAN:
        # внутри второго цикла for проверяются команды
        if command.endswith('access vlan'):         # Если команда заканчивается на access vlan:
            print(' {} {}'.format(command, vlan))   # - выводится команда, и к ней добавляется номер VLAN
        else:                                       # Во всех остальных случаях:
            print(' {}'.format(command))            # - просто выводится команда
другой вариант последнего примера:
access_cmd = ['swithport mode access', 'swithport access vlan']
access_intf_vlan = {'0/0': 100, '0/1': 200, '0/2': 300, '0/3': 400}

for intf, vlan in access_intf_vlan.items():
    print(f'interface GigabitEthernet' + intf)
    for cmd in access_cmd:
        if cmd.endswith('access vlan'):
            print(f' {cmd} {vlan}')
        else:
            print(f' {cmd}')
